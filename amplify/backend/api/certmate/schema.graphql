# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Index @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: private, operations: [read] }
]){
	id: ID!
	users: [User] @hasMany (indexName: "usersInCertMate", fields: ["id"])
	companies: [Company] @hasMany (indexName: "companiesInCertMate", fields: ["id"])
	vehicles: [Vehicle] @hasMany (indexName: "vehiclesInCertMate", fields: ["id"])
	certs: [Cert] @hasMany (indexName: "certsInCertMate", fields: ["id"])
	notifications: [Notification] @hasMany (indexName: "notificationsInCertMate", fields: ["id"])
}

type User @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: groups, groups: ["SuperAdmin"], operations: [read, create, update, delete] },
	{ allow: groups, groups: ["Admin"], operations: [read, update] },
	{ allow: groups, groups: ["read"], operations: [read] },
    { allow: groups, groups: ["write"], operations: [update, delete] }
]){
	id: ID!
	name: String
	pushToken: String
	email: String
	phone: String
	roles: [String] # inspector, driver, admin
	acN: String # Inspector Accreditation Number
	createdAt: String
	updatedAt: String
	favouriteCerts: [String]
	fleets: [Fleet]
	driverCerts: [Cert] @hasMany(indexName: "certsOfDriver", fields: ["id"])
	inspectorCerts: [Cert] @hasMany(indexName: "certsOfInspector", fields: ["id"])
	notifications: [Notification] @hasMany(indexName: "notificationsOfUser", fields: ["id"])
	companyID: ID! @index(name: "usersInCompany", sortKeyFields: ["updatedAt"])
    company: Company @belongsTo(fields: ["companyID"])
	bID: ID @default(value: "f") @index(name: "usersInCertMate", sortKeyFields: ["name"])
}

type Company @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: groups, groups: ["SuperAdmin"], operations: [read, create, update, delete] },
	{ allow: groups, groups: ["Admin"], operations: [read, update] },
	{ allow: groups, groups: ["read"], operations: [read] },
    { allow: groups, groups: ["write"], operations: [update, delete] }
]){
	id: ID!
	name: String
	users: [User] @hasMany(indexName: "usersInCompany", fields: ["id"])
	vehicles: [Vehicle] @hasMany(indexName: "vehiclesInCompany", fields: ["id"])
	certs: [Cert] @hasMany(indexName: "certsInCompany", fields: ["id"])
	fleets: [Fleet]
	createdAt: String
	updatedAt: String
	bID: ID @default(value: "f") @index(name: "companiesInCertMate", sortKeyFields: ["name"])
}

type Vehicle @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: groups, groups: ["SuperAdmin"], operations: [read, create, update, delete] },
	{ allow: groups, groups: ["Admin"], operations: [read, update] },
	{ allow: groups, groups: ["read"], operations: [read] },
	{ allow: private, operations: [read] }
]){
	id: ID!
	companyID: ID! @index(name: "vehiclesInCompany", sortKeyFields: ["updatedAt"])
    company: Company @belongsTo(fields: ["companyID"])
	make: String
	model: String
	rego: String
	category: String # Light, Prime Mover, etc.
	assetId: String
	certs: [Cert] @hasMany(indexName: "certsOfVehicle", fields: ["id"])
	createdAt: String
	updatedAt: String
	bID: ID @default(value: "f") @index(name: "vehiclesInCertMate", sortKeyFields: ["updatedAt"])
}

type Cert @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: groups, groups: ["SuperAdmin"], operations: [read, create, update, delete] },
	{ allow: groups, groups: ["Admin"], operations: [read, update] },
	{ allow: groups, groups: ["read"], operations: [read] },
	{ allow: private, operations: [read] }
]){
	id: ID!
	companyID: ID! @index(name: "certsInCompany", sortKeyFields: ["updatedAt"])
    company: Company @belongsTo(fields: ["companyID"])
	vehicleID: ID! @index(name: "certsOfVehicle", sortKeyFields: ["updatedAt"])
    vehicle: Vehicle @belongsTo(fields: ["vehicleID"])
	driverID: ID! @index(name: "certsOfDriver", sortKeyFields: ["updatedAt"])
    driver: User @belongsTo(fields: ["driverID"])
	inspectorID: ID! @index(name: "certsOfInspector", sortKeyFields: ["updatedAt"])
    inspector: User @belongsTo(fields: ["inspectorID"])
	type: String # Self Declaration, Hygiene
	odometer: String # 8 places
	client: String # Arrow Energy, Orion, etc...
	operatingArea: String
	checkList: [String] # Checklist of items to mark as clean/fail (TCC JD)
	status: String
	createdAt: String
	updatedAt: String
	bID: ID @default(value: "f") @index(name: "certsInCertMate", sortKeyFields: ["updatedAt"])
}

type Notification @model @auth(rules: [
	{ allow: owner },
    { allow: public },
	{ allow: groups, groups: ["SuperAdmin"], operations: [read, create, update, delete] },
	{ allow: groups, groups: ["Admin"], operations: [read, update] },
	{ allow: private }
]){
	id: ID!
	type: String # Invitation to CertMate, Invitation to Team, Cert Shared, etc...
	title: String
	body: String
	userID: ID! @index(name: "notificationsOfUser", sortKeyFields: ["updatedAt"])
    user: User @belongsTo(fields: ["userID"])
	bID: ID @default(value: "f") @index(name: "notificationsInCertMate", sortKeyFields: ["updatedAt"])
	createdAt: String
	updatedAt: String
}

type CertCheckList @aws_api_key @aws_cognito_user_pools @aws_iam{
    title: String # Title of section - Internal, External, etc...
	status: String # Clean/Fail, Approve/Disapprove
	comments: String
	items: [String] # title, status (TCC JD)
}

type Fleet @aws_api_key @aws_cognito_user_pools @aws_iam{
	id: String
    name: String # Name of Fleet
	vehicles: [String] # VehicleIDs
}